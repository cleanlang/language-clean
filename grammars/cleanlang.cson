'scopeName': 'source.cleanlang'

'fileTypes': ['cl']
'name': 'cleanlang'
'patterns': [
    {
    'include': '#variable'
    }
    {
    'include': '#function_decl'
    }
    {
    'include': '#objects'
    }
    {
    'include':'#curly'
    }
    {
    'include': '#square'
    }
    {
    'include': '#comments'
    }
    {
    'include': '#keywords'
    }
    {
    'include': '#method_calls'
    }
    {
    'include': '#numbers'
    }
    {
    'include': '#boolean'
    }
    {
    'include': '#null'
    }
    {
    'include': '#strings'
    }
    {
    'include': '#operators'
    }
    {
    'include': '#round'
    }
]
'repository':
  'numbers':
    'patterns': [
      {
       'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((E|e)(\\+|-)?[0-9]+)?\\b'
       'name': 'constant.numeric.cleanlang'
      }
    ]
  'boolean':
    'patterns': [
      {
        'match': '\\b(true|false)\\b'
        'name': 'constant.language.boolean.cleanlang'
      }
    ]
  'null':
    'patterns': [
      {
        'match': '\\b(null)\\b'
        'name': 'constant.language.null.cleanlang'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.cleanlang'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.cleanlang'
        'name': 'string.quoted.single.cleanlang'
      }
      {
        'include': '#string_escapes'
      }
      {
        'begin': '\"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.InvalidBegin.cleanlang'
        'end': '\"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.InvalidEnd.cleanlang'
        'name': 'invalid.illegal.string.cleanlang'
      }
    ]
  'string_escapes':
    'patterns': [
      {
        'match': '\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^\'"]*'
        'name': 'invalid.illegal.unicode-escape.cleanlang'
      }
      {
        'match': '\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))'
        'name': 'constant.character.escape.cleanlang'
        'captures':
          '1':
            'name': 'punctuation.definition.unicode-escape.begin.bracket.curly.cleanlang'
          '2':
            'patterns': [
              {
                # Max codepoint: \u{10FFFF}
                'match': '[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}'
                'name': 'invalid.illegal.unicode-escape.cleanlang'
              }
            ]
          '3':
            'name': 'punctuation.definition.unicode-escape.end.bracket.curly.cleanlang'
      }
      {
        'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.cleanlang'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.section.begin.comment.js'
          '2':
            'name': 'punctuation.section.end.comment.js'
        'match': '(/\\*)(\\*/)'
        'name': 'comment.block.empty.js'
      }
      {
        'begin': '/\\*\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.begin.comment.js'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.section.end.comment.js'
        'name': 'comment.block.documentation.js'
        'patterns': [
          {
            'include': 'source.jsdoc'
          }
        ]
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.begin.comment.js'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.section.end.comment.js'
        'name': 'comment.block.js'
      }
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.js'
        'end': '$'
        'name': 'comment.line.double-slash.js'
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '&&|!|\\|\\|'
        'name': 'keyword.operator.logical.cleanlang'
      }
      {
        'match': '=|:|<-'
        'name': 'keyword.operator.assignment.cleanlang'
      }
      {
        'match': '!==|<=|>=|==|<|>'
        'name': 'keyword.operator.comparison.cleanlang'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.concat.cleanlang'
      }
      {
        'match': '%|\\*|/|-|\\+'
        'name': 'keyword.operator.cleanlang'
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(if|then|else|return|in|let)\\b'
        'name': 'keyword.control.cleanlang'
      }
      {
        'match': '\\b(getLine|putLine|include|do|IO|defineProperty|delete)\\b'
        'name': 'keyword.reserved.cleanlang'
      }
    ]
  'variable':
    'patterns': [
      {
        'match': '\\b\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*='
        'captures':
          '1':
            'name': 'storage.type.constant.cleanlang'
      }
    ]
  'square':
    'patterns': [
      {
        'match': '\\[|\\]'
        'name': 'meta.brace.square.cleanlang'
      }
    ]
  'curly':
    'patterns': [
      {
        'match': '\\{|\\}'
        'name': 'meta.brace.curly.cleanlang'
      }
    ]
  'objects':
    'patterns': [
      {
        # OBJ in OBJ.prop, OBJ.methodCall()
        'match': '[A-Z][A-Z0-9_$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)'
        'name': 'constant.other.object.cleanlang'
      }
      {
        # obj in obj.prop, obj.methodCall()
        'match': '[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)'
        'name': 'variable.other.object.cleanlang'
      }
    ]
  'method_calls':
    'patterns': [
      {
        'match': '(\\.)\\s*([\\w$]+)\\s*(.*|\\n)'
        'captures':
          '1':
            'name': 'meta.delimiter.method.period.cleanlang'
          '2':
            'patterns': [
              {
                'match': "[a-zA-Z_$][\\w$]*"
                'name': 'entity.name.function.cleanlang'
              }
              {
                'match': '\\d[\\w$]*'
                'name': 'invalid.illegal.identifier.cleanlang'
              }
            ]
          '3':
            'patterns': [
                {
                  'include': '#arguments'
                }
            ]
        'name': 'meta.method-call.cleanlang'
      }
    ]
  'arguments':
    'patterns': [
      {
        # arg1 arg2 in .objName arg1 arg2 ...
        'match': '\\s*(([A-Za-z_][A-Za-z0-9_]*)\\s*)'
        'name': 'meta.arguments.cleanlang'
      }
      {
        'begin': '\\('
        'beginCaptures':
          '0': 'punctuation.definition.arguments.begin.bracket.round.cleanlang'
        'end': '\\)'
        'endCaptures':
          '0': 'punctuation.definition.arguments.end.bracket.round.cleanlang'
        'name': 'meta.arguments.cleanlang'
        'patterns': [
          'include': '$self'
        ]
      }
      {
        'include': '$self'
      }
    ]
  'function_decl':
    'patterns': [
      {
        'match': '\\s*([\\w$]+)\\s*((([A-Za-z_][A-Za-z0-9_]*)\\s*)+)\\s*(=)(.*|\\n)'
        'captures':
          '1':
            'patterns': [
              {
                'match': "[a-zA-Z_$][\\w$]*"
                'name': 'entity.name.function.cleanlang'
              }
              {
                'match': '\\d[\\w$]*'
                'name': 'invalid.illegal.identifier.cleanlang'
              }
            ]
          '2':
            'name': 'variable.parameter.function.cleanlang'
          '6':
            'patterns': [
              'include': '$self'
            ]
      }
    ]
