'scopeName': 'source.cleanlang'

'fileTypes': ['cl']
'name': 'cleanlang'
'patterns': [
    {
    'include': '#includes'
    }
    {
    'include': '#keywords'
    }
    {
    'include':'#curly'
    }
    {
    'include': '#square'
    }
    {
    'include': '#comments'
    }
    {
    'include': '#numbers'
    }
    {
    'include': '#boolean'
    }
    {
    'include': '#null'
    }
    {
    'include': '#strings'
    }
    {
    'include': '#operators'
    }
    {
    'include': '#round'
    }
    {
    'include': '#variable'
    }
    {
    'include': '#function_declaration'
    }
    {
    'include': '#function_calls'
    }
    {
    'include': '#objects'
    }
    {
    'include': '#properties'
    }
    {
    'include': '#method_calls'
    }
]
'repository':
  'includes':
    'patterns': [
      {
        'match': '\\binclude\\s+(node-core|browser-core)\\b'
        'captures':
          '0':
            'name': 'keyword.includes.cleanlang'
      }
    ]
  'numbers':
    'patterns': [
      {
       'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((E|e)(\\+|-)?[0-9]+)?\\b'
       'name': 'constant.numeric.cleanlang'
      }
    ]
  'boolean':
    'patterns': [
      {
        'match': '\\b(true|false)\\b'
        'name': 'constant.language.boolean.cleanlang'
      }
    ]
  'null':
    'patterns': [
      {
        'match': '\\b(null)\\b'
        'name': 'constant.language.null.cleanlang'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.cleanlang'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.cleanlang'
        'name': 'string.quoted.single.cleanlang'
      }
      {
        'include': '#string_escapes'
      }
      {
        'begin': '\"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.InvalidBegin.cleanlang'
        'end': '\"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.InvalidEnd.cleanlang'
        'name': 'invalid.illegal.string.cleanlang'
      }
    ]
  'string_escapes':
    'patterns': [
      {
        'match': '\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^\'"]*'
        'name': 'invalid.illegal.unicode-escape.cleanlang'
      }
      {
        'match': '\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))'
        'name': 'constant.character.escape.cleanlang'
        'captures':
          '1':
            'name': 'punctuation.definition.unicode-escape.begin.bracket.curly.cleanlang'
          '2':
            'patterns': [
              {
                # Max codepoint: \u{10FFFF}
                'match': '[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}'
                'name': 'invalid.illegal.unicode-escape.cleanlang'
              }
            ]
          '3':
            'name': 'punctuation.definition.unicode-escape.end.bracket.curly.cleanlang'
      }
      {
        'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.cleanlang'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.section.begin.comment.cleanlang'
          '2':
            'name': 'punctuation.section.end.comment.cleanlang'
        'match': '(/\\*)(\\*/)'
        'name': 'comment.block.empty.cleanlang'
      }
      {
        'begin': '/\\*\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.begin.comment.cleanlang'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.section.end.comment.cleanlang'
        'name': 'comment.block.documentation.cleanlang'
        'patterns': [
          {
            'include': 'source.cleanlangdoc'
          }
        ]
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.begin.comment.cleanlang'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.section.end.comment.cleanlang'
        'name': 'comment.block.cleanlang'
      }
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.cleanlang'
        'end': '$'
        'name': 'comment.line.double-slash.cleanlang'
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '<\\=|>\\=|\\=\\=|<|>|\\!\\='
        'name': 'keyword.operator.comparison.cleanlang'
      }
      {
        'match': '\\='
        'name': 'keyword.operator.assignment.augmented.cleanlang'
      }
      {
        'match': '<\\-'
        'name': 'keyword.operator.reverse-bind.cleanlang'
      }
      {
        'match': '&&|!|\\|\\|'
        'name': 'keyword.operator.logical.cleanlang'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.concat.cleanlang'
      }
      {
        'match': '%|\\*|/|-|\\+'
        'name': 'keyword.operator.arithmetic.cleanlang'
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(if|then|else|else\\s+if)\\b'
        'name' : 'keyword.control.conditional.cleanlang'
      }
      {
        'match': '\\b(getLine|return|in|let|putLine|do|IO|defineProperty|delete)\\b'
        'name': 'keyword.reserved.cleanlang'
      }
    ]
  'variable':
    'patterns': [
      {
        'match': '\\b\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*=\\s+(.*)'
        'captures':
          '1':
            'name': 'storage.type.constant.cleanlang'
          '2':
            'patterns': [
                {
                  'include': '$self'
                }
            ]
      }
      {
        'match': '\\b\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\:)'
        'captures':
          '1':
            'name': 'entity.name.variable.cleanlang'
      }
    ]
  'square':
    'patterns': [
      {
        'match': '\\[|\\]'
        'name': 'meta.brace.square.cleanlang'
      }
    ]
  'curly':
    'patterns': [
      {
        'match': '\\{|\\}'
        'name': 'meta.brace.curly.cleanlang'
      }
    ]
  'objects':
    'patterns': [
      {
        # OBJ|obJ|Obj in OBJ.prop, OBJ.methodCall()
        'match': '\\b[a-zA-Z_][a-zA-Z0-9_$]*(?=\\.[a-zA-Z_$]\\w+)'
        'name': 'constant.other.object.cleanlang'
      }
    ]
  'method_calls':
    'patterns': [
      {
        'match': '(\\.)([\\w$]*)\\s*(\\(.+?\\))'
        'captures':
          '1':
            'name': 'meta.delimiter.method.period.cleanlang'
          '2':
            'patterns': [
              {
                'match': "[a-zA-Z_$][\\w$]+"
                'name': 'entity.name.function.cleanlang'
              }
              {
                'match': '\\d[\\w$]*'
                'name': 'invalid.illegal.identifier.cleanlang'
              }
            ]
          '3':
            'name': 'variable.argument.object.cleanlang'
        'name': 'meta.method-call.cleanlang'
      }
      {
        'match': '(\\.)([\\w$]*)\\s+(([\\w$]+).+)'
        'captures':
          '1':
            'name': 'meta.delimiter.method.period.cleanlang'
          '2':
            'patterns': [
              {
                'match': "[a-zA-Z_$][\\w$]+"
                'name': 'entity.name.function.cleanlang'
              }
              {
                'match': '\\d[\\w$]*'
                'name': 'invalid.illegal.identifier.cleanlang'
              }
            ]
          '3':
            'name': 'variable.argument.method-call.cleanlang'
        'name': 'meta.method-call.cleanlang'
      }
    ]
  'function_declaration':
    'patterns': [
      {
        'begin': '\\s*([A-Za-z_][A-Za-z0-9_]*)(((\\s+)([A-Za-z_][A-Za-z0-9_]*))+)\\s+(?=\\=\\s+)'
        'beginCaptures':
          '1':
            'name': 'entity.name.function_declaration.cleanlang'
          '2':
            'name': 'meta.function.parameters.cleanlang'
            'patterns': [
              {
                'match': '([A-Za-z_][A-Za-z0-9_]*)'
                'name' : 'variable.parameter.function.cleanlang'
              }
            ]
        'end': '(\\=)'
        'endCaptures':
          '1':
            'name': 'keyword.operator.assignment.cleanlang'
      }
      {
        'match': '([A-Za-z_][A-Za-z0-9_]*)\\s+(.+?)\\s+(?=\\=\\s+)'
        'captures':
          '1':
            'name': 'entity.name.function_declaration_pattern.cleanlang'
          '2':
            'patterns': [
              {
                'include': '#identifier'
              }
              {
                'include': '#boolean'
              }
              {
                'include': '#numeric'
              }
              {
                'include': '#identifier'
              }
              {
                'include': '$self'
              }
            ]
      }
    ]
  'properties':
    'patterns': [
      {
        # PROP1 in obj.PROP1.prop2, func().PROP1.prop2
        'match': '(\\.)([A-Z][A-Z0-9_$]+\\$*)(?=\\.)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.cleanlang'
          '2':
            'name': 'variable.other.object.property.cleanlang'
      }
      {
        # prop1 in obj.prop1.prop2, func().prop1.prop2
        'match': '(\\.)([a-zA-Z_$][\\w$]+)(?=\\.)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.cleanlang'
          '2':
            'name': 'variable.other.object.property.cleanlang'
      }
      {
        # PROP in obj.PROP, func().PROP
        'match': '(\\.)([A-Z][A-Z0-9_$]+)(?=\\.)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.cleanlang'
          '2':
            'name': 'variable.other.object.property.cleanlang'
      }
      {
        # prop in obj.prop, func().prop
        'match': '(\\.)([a-zA-Z_$][\\w$]+)(?=\\.)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.cleanlang'
          '2':
            'name': 'variable.other.object.property.cleanlang'
      }
      {
        # 123illegal in obj.123illegal, func().123illegal
        'match': '(\\.)\\s*([0-9][\\w$]*)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.cleanlang'
          '2':
            'name': 'invalid.illegal.identifier.cleanlang'
      }
    ]
  'identifier':
    'patterns': [
      {
      'match': '\\b[a-zA-Z_][a-zA-Z_0-9]*\\b'
      'name': 'variable.identifier.cleanlang'
      }
    ]
  'function_calls':
    'patterns': [
      {
        'match': '([A-Za-z_][A-Za-z0-9_]*)\\s+([^\\+|\\%|\\*|\\+\\+|\\/|\\%|\\=\\=|\\-|\\>|\\<|\\^|if|then|else].+?)(?=$\\n|\\+)'
        'captures':
          '1':
            'name': 'entity.name.function_call.cleanlang'
          '2':
            'patterns': [
              {
                'include': '#boolean'
              }
              {
                'include': 'keywords'
              }
              {
                'include': '#argument'
              }
              {
                'include': '#numeric'
              }
              {
                'include': '#bracket_function'
              }
              {
                'include': '#argument'
              }
              {
                'include': '#strings'
              }
              {
                'include': '$self'
              }
            ]
          'name': 'meta.arguments.cleanlang'
      }
    ]
  'bracket_function':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0`':
            'name': 'punctuation.definition.bracket.round.begin.cleanlang'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.bracket.round.end.cleanlang'
        'patterns': [
          {
            'include': '#function_calls'
          }
          {
            'include': '#argument'
          }
          {
            'include': '#operators'
          }
          {
            'include': '$self'
          }
        ]

      }
    ]
  'argument':
    'patterns': [
      {
      'match': '[a-zA-Z_][a-zA-Z_0-9]*'
      'name': 'meta.arguments.cleanlang'
      }
    ]
